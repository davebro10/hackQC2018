{"version":3,"sources":["src/bin/app.ts"],"names":[],"mappings":";;AAAA,oCAAqC;AACrC,8BAA8B;AAC9B,2CAA2C;AAC3C,6CAA0C;AAC1C,kDAA+C;AAE/C,MAAM,GAAG,GAAqB,QAAQ,EAAE,CAAC;AAEzC,kCAAkC;AAClC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC;AAC5B,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAErD,eAAe;AACf,MAAM,IAAI,GAAW,eAAM,CAAC,IAAI,CAAC;AACjC,GAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAEtB,MAAM,MAAM,GAAiB,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;AAErD,uBAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAE3B;;GAEG;AACH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5B,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAEpC;;GAEG;AAEH,iBAAiB,KAA4B;IAC3C,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;QAC/B,MAAM,KAAK,CAAC;IACd,CAAC;IAED,MAAM,IAAI,GAAW,OAAO,IAAI,KAAK,QAAQ;QAC3C,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;IAEnB,uDAAuD;IACvD,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QACnB,KAAK,QAAQ;YACX,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;YACtD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,KAAK,CAAC;QACR,KAAK,YAAY;YACf,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;YAC3C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,KAAK,CAAC;QACR;YACE,MAAM,KAAK,CAAC;IAChB,CAAC;AACH,CAAC;AAED;;GAEG;AACH;IACE,MAAM,IAAI,GAAuD,MAAM,CAAC,OAAO,EAAE,CAAC;IAClF,MAAM,IAAI,GAAW,OAAO,IAAI,KAAK,QAAQ;QAC3C,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;IACxB,OAAO,CAAC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;AACxC,CAAC","file":"app.js","sourcesContent":["import * as  _express from \"express\";\r\nimport * as _http from \"http\";\r\nimport * as _bodyParser from \"body-parser\";\r\nimport { config } from \"../config/config\";\r\nimport { routesCore } from './core/routesCore';\r\n\r\nconst app: _express.Express = _express();\r\n\r\n// Automatic body parsing for Json\r\napp.use(_bodyParser.json());\r\napp.use(_bodyParser.urlencoded({ extended: false }));\r\n\r\n// Set the port\r\nconst port: number = config.port;\r\napp.set('port', port);\r\n\r\nconst server: _http.Server = _http.createServer(app);\r\n\r\nroutesCore.initRoutes(app);\r\n\r\n/**\r\n * Listen on provided port, on all network interfaces.\r\n */\r\nserver.listen(port);\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\n/**\r\n * Event listener for HTTP server \"error\" event.\r\n */\r\n\r\nfunction onError(error: NodeJS.ErrnoException) {\r\n  if (error.syscall !== 'listen') {\r\n    throw error;\r\n  }\r\n\r\n  const bind: string = typeof port === 'string'\r\n    ? 'Pipe ' + port\r\n    : 'Port ' + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case 'EACCES':\r\n      console.error(bind + ' requires elevated privileges');\r\n      process.exit(1);\r\n      break;\r\n    case 'EADDRINUSE':\r\n      console.error(bind + ' is already in use');\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Event listener for HTTP server \"listening\" event.\r\n */\r\nfunction onListening() {\r\n  const addr: { port: number; family: string; address: string; } = server.address();\r\n  const bind: string = typeof addr === 'string'\r\n    ? 'pipe ' + addr\r\n    : 'port ' + addr.port;\r\n  console.debug('Listening on ' + bind);\r\n}\r\n"],"sourceRoot":"../.."}